1.How internet works?
The Internet simplifies down to interconnected computers via wires, allowing data transfer between servers (holding website data) and clients (user devices). DNS servers act as an address book, translating domain names into IP addresses for accessing websites. Undersea cables link continents, transmitting data via optic fibers at staggering speeds.

Highlights:
💻 The Internet is a network of wired connections linking computers globally.
🌐 Servers serve data to users, and clients access the Internet through unique IP addresses.
📚 DNS servers function as address books, translating domain names into IP addresses.
🌊 Undersea cables, transmitting data at incredible speeds, connect continents for Internet access.
🚀 Signals travel via electric impulses at light speed, enabling rapid data transmission globally.
🌍 Exploring websites involves complex signals across both underwater and above-ground wires.
🛠️ Understanding website functioning is crucial for building web apps and sites.

2.How does website actually work?
Understanding the functioning of websites involves the roles of HTML, CSS, and JavaScript,
where HTML forms the content, CSS styles it, and JavaScript adds functionality. The browser 
uses these files to render websites, allowing interaction and creating a dynamic user experience.

Highlights
🏠 HTML as Building Blocks HTML serves as the foundational content of a website, containing text, images, buttons, and links, akin to the bricks of a house.
🎨 CSS Styling CSS determines the appearance of HTML elements, defining colours, shapes, and overall aesthetics, transforming the website's look.
🧩 JavaScript Functionality JavaScript empowers websites with interactive features, turning static pages into functional entities, enabling actions like sending emails or posting on social media.
🖥️ Browser's Role The browser, specialized in handling these files, displays the content (HTML), applies styling (CSS), and enables functionality (JavaScript) for a seamless user experience.
🔍 Chrome Developer Tools These tools allow developers to inspect and modify elements of websites temporarily, offering insights into the code structure and enabling experimentation.
🌐 Local Changes vs. Server Refresh Changes made via developer tools are local and don't persist after a page refresh, as websites retrieve fresh HTML, CSS, and JavaScript files from servers.
Understanding these components empowers developers to create, modify, and host websites, allowing customization, functionality, and personalized user experiences.

3.What is HTML?
HTML, the foundation of websites, structures content. It uses tags to mark up text, create hyperlinks, and define a site's layout. HTML files stand alone, unlike CSS or JavaScript files, which need HTML for websites.
Highlights
💻 HTML serves as the backbone of web content structure.
🌐 Hyperlinks in HTML enable navigation between web documents.
🖊 Markup in HTML involves using tags like,, etc., to format text.
📑 Early internet days had a few HTML tags; today, essential tags like and are crucial.
🚀 Learning HTML tags gradually through projects and exercises is more effective than memorizing them.
🏷 Starting with the essential tag,, in the next lesson.
This text explained HTML's role in websites, the significance of hyperlinks, and the basics of markup using HTML tags.

4.The heading element
Heading tags range from h1 to h6, dictating the importance and organization of text.
💻 Tags, denoted by angle brackets, signify the opening and closing of HTML elements.
📘 Heading levels (h1 to h6) define the importance of text, with h1 being the most significant
and h6 the least.🛠️ Proper use of heading elements involves following a sequential order (h1 to h6) without skipping levels.
📖 Recommended resource Mozilla Developer Network Web Docs offer in-depth HTML element documentation and interactive examples for further learning.

5.The paragraph element 
🌐 Introduced various alternative placeholder text generators like Bacon Ipsum and Bro Ipsum, highlighting their fun variations for testing content.

6.The void element
Understanding void elements in HTML involves recognizing their distinct syntax, devoid of content within the tag itself. The use of self-closing tags, such as <hr> and <br>, signifies these elements, providing structural breaks and divisions in the content layout.

Highlights
⚠️ Void elements in HTML, like <hr> and <br>, lack content within the tag and have a specific syntax distinct from non-void elements.
ℹ️ The forward slash in void elements (e.g., <hr />) signifies closure and separates them from non-void elements, emphasizing the absence of content.
📝 <hr> elements produce horizontal lines, serving to separate content sections in HTML documents, enhancing readability and structure.
🌐 <br> elements are used for line breaks within paragraphs, aiding in formatting, especially evident in poetry or address listings.
✅ Proper usage involves employing <br> within a single paragraph and <hr> to demarcate larger content sections.
🚫 Avoid using <br> excessively for new lines within a paragraph, as it could impact accessibility for users relying on screen readers.
🛠️ Best practice Emphasize clarity by using the conventional self-closing tag format (<tag />) for void elements, despite HTML5's acceptance of the non-closing format (<tag>).

7.The list elements 
This lesson delves into HTML list elements, covering the creation of ordered and unordered lists to organize content on a webpage. 
It highlights the structure of lists, their use cases, and how to create them using HTML tags.

Highlights
📋 HTML lists come in two main types unordered (bulleted) and ordered (numbered).
📝 Unordered lists use <ul> tags with <li> tags for each item, presenting content without any specific order.
1️⃣ Ordered lists utilize <ol> tags with <li> tags to showcase content in a specified order using numbers.
🌐 Lists are commonly seen on various websites and are essential for structuring content effectively.
🖥️ The lesson includes an exercise to practice creating lists within an HTML document, simulating a recipe webpage with headings and categorized lists.
🛠️ Techniques like copying, pasting, and dragging content assist in efficiently organizing lists within HTML.
🧠 Understanding how to format lists and preferences for coding styles (line placements) are discussed, emphasizing personal choices in coding practices.

8.Nesting and indentation 
This lesson delves into nesting and indentation within lists, demonstrating how to embed lists inside one another. It emphasizes the importance of proper code structure and indentation for readability.

Highlights
📋 Understanding nested lists Learning how to embed lists within lists, utilizing indentation for clarity.
🌐 Preview feature usage Utilizing tools like the preview function to understand and refine coded structures.

9.The anchor element 
SummaryUnderstanding the anchor element in HTML involves learning about attributes, 
especially "href," which turns content into an active hyperlink. There are specific and 
global attributes, such as "draggable," impacting element behaviors.
Highlights
🌐 Anchor elements in HTML create hyperlinks.
📝 Attributes like "href" turn content into active hyperlinks.
🌟 Specific and global attributes impact element behaviors.
🖱️ "Draggable" attribute allows dragging elements.
📚 HTML attributes structure name, space, attribute name, equals sign, value.
📋 Exercise Create a list of top five websites using anchor tags.
🛠️ Challenge Modify the "start" attribute in an ordered list to change the numbering.
Understanding anchor elements involves grasping the role of attributes like "href," distinguishing 
specific and global attributes, and their impact on element behaviors. 

10.The image element 
It covers the image tag's attributes, such as "src" for image location and the crucial 
"alt" attribute for accessibility. Practical demonstrations highlight the importance of 
alternative text for visually impaired users.

Highlights
🖼️ Image element's simplicity Allows addition of images to websites using the "src" attribute.
🌐 Importance of "alt" attribute Provides alternative text for visually impaired users via screen readers.

11.File paths
SummaryUnderstanding file paths is crucial in both computing and web development. 
Absolute paths refer to the root of a computer, while relative paths are relative to the 
current location. Absolute paths offer a fixed route, while relative paths are more flexible,
 accommodating changes in file structure.
 Highlights
 💻 File paths serve as unique locations for files or folders on a computer.
 🌐 Absolute paths start from the root of the computer, providing a specific route to a file or folder.
 📍 Relative paths, relative to the current location, offer flexibility and adaptability, especially in web development.
 📂 Special characters like ".." (up a level) and "." (stay within the current directory) aid in navigating file structures.
 🖼️ The exercise involves using relative file paths to display images correctly on a webpage, demonstrating practical understanding of file paths.
 🧩 Relative paths remain valid even if folders are moved or reorganized, ensuring robustness in coding practices.
 🚀 Relative paths are essential in web development for referencing resources like images, sounds, or HTML files within a project.

 12.Web pages 
 Multi-page websites require the creation of separate web pages, each residing within the same project folder.
To link between pages, anchor tags are used with specific file paths referencing the other HTML files.
Understanding file paths is crucial to correctly navigate and link resources within a website.
The correct file path structure ("dot slash") ensures proper linking and resource display within HTML elements
Highlights
🌐 Multi-page websites Creating distinct pages within a project folder.
🧭 File paths & linking Essential for navigating between pages and displaying resources.
🖼️ Practical challenges Linking images and pages using anchor tags and correct file paths.
📁 VS Code organization Understanding folder structures for effective webpage linking.
📸 Personalization Encouragement to incorporate personal images into the website.
📄 HTML boilerplate Upcoming lesson on proper website structuring.

13.HTML Boilerplate 
Understanding the HTML boilerplate is like understanding the structure of a letter - it sets the groundwork for HTML files. The boilerplate consists of the doctype declaration, the HTML root, the head element (for hidden info like character encoding and the title), and the body element (where website content resides). Nesting elements is crucial, akin to a sandwich with its layers, and maintaining proper indentation keeps code organized. A shortcut in VS code allows for quick insertion of the boilerplate by typing an exclamation mark.

Highlights
📝 Understanding HTML boilerplate akin to structuring a letter, it establishes the groundwork for HTML files.
🖥️ Doctype declaration Specifies the HTML version, like HTML5, for browsers to interpret.
🌐 HTML root & Language attribute Serves as the base, defining the language for screen readers and assistive technologies.
🧠 Head element Holds hidden website information like character encoding and the page's title.
💻 Body element Where the bulk of website content resides - text, images, links - creating the core structure.
🥪 Nesting elements Analogous to sandwich layers, essential for maintaining organized and structured code.
⌨️ VS code shortcut Use '!' followed by Enter to insert boilerplate code quickly in VS code for HTML documents.

14.website hosting 
SummaryLearn how to host your website using GitHub, enabling it to be accessible on the internet.
This tutorial covers the process step by step, from creating a GitHub repository to uploading 
your site's files and making it live.
Highlights
🌐 Understanding web hosting Making websites accessible globally via web servers connected to the internet.
🖥️ Local development vs. web hosting Differentiating between local file access and hosting on servers for worldwide access.
📂 Uploading to GitHub Creating a repository, uploading site files, ensuring proper file structure and naming for successful hosting.
⏳ Processing and deployment Waiting for file processing, configuring settings, and patiently waiting for the site to go live.
🌟 Sharing your website Obtaining the URL to share your hosted portfolio globally for others to view and appreciate.
🎨 Next steps in website development Teasing upcoming lessons on CSS and enhancing website aesthetics.

1.Introduction to CSS 
SummaryIntroduction to CSS explains its significance in web development, detailing its origin, 
purpose, and the separation of styling from content in web design.
Highlights:
💻 CSS is a cascading style sheet used to style websites, separating content from design.
🌐 Initially, HTML limitations led developers to seek ways to style their sites, prompting the need for CSS.
📜 HTML 3.2 introduced elements like the font tag for basic styling, but these became deprecated due to cluttering HTML with style attributes.
🆕 In 1996, a W3C recommendation by Hakon Wium introduced CSS, allowing the attachment of styles like colours and spacing to HTML.
🛠️ CSS's modular approach separates concerns, enabling distinct management of content and design.
🎨 The separation of HTML and CSS is demonstrated through a simple website, showcasing how CSS changes aesthetics without altering HTML code.
📚 Further learning on CSS application is encouraged in the next lesson.

2.How to add CSS 
Summary
This lesson explains the three ways of adding CSS to an HTML document Inline, Internal, and External. 
It demonstrates their applications, limitations, and best practices.
Highlights
👉 Inline CSS Adds style directly in the HTML tag, suitable for individual element styling.
👉 Internal CSS Uses the <style> tag within the HTML file, beneficial for single-page styling.
👉 External CSS Utilizes a separate CSS file linked via <link> tag, recommended for multi-page websites.
👉 Inline Adds style directly into the HTML tag; useful for specific element styling but cumbersome for multiple elements.
👉 Internal Embeds CSS within the HTML file; applicable to a single page, not recommended for multi-page sites.
👉 External Stores CSS rules in a separate file linked to HTML; ideal for multi-page sites, standard practice in web development.
👉 Practical exercise demonstrates using these methods by styling an H1 element differently across three pages (inline, internal, external).

3.CSS Selectors 
Summary
In this CSS lesson, various selectors (element, class, ID, attribute, universal) were explained 
and demonstrated to apply styles to HTML elements based on different criteria.
Highlights
🎯 Element selectors target specific HTML tags for styling, applying changes universally to all instances of that tag.
💼 Class selectors group HTML elements, allowing consistent styling across different elements sharing the same class.
🔍 ID selectors uniquely style a single element in a document, differentiating it from classes applied to multiple elements.
🏷 Attribute selectors focus on elements with specific attributes or attribute values to apply CSS styles.
🌐 Universal selectors apply styles universally to all elements where the stylesheet is active.
🎨 A practical exercise involved applying CSS rules using selectors to modify HTML elements without altering the HTML itself.

4.CSS Colors 
This lesson delves into CSS color properties, covering named colours, hex codes, and tools 
for creating unique colour palettes.
Highlights
🎨 CSS properties allow setting background and text colours for HTML elements.
🌈 Named colours, like "Cornflower Blue" or "Olive Drab," offer preset options.
#HEX codes represent colours through fractions of red, green, and blue.
💡 ColorHunt.co provides professionally designed palettes for diverse website hues.
🔠 Using hex codes from tools like Color Hunt allows unique colour application.
⚙️ The lesson demonstrates applying colours via named colours and hex codes in a simple website.
🖌️ The exercise encourages experimentation with CSS colours for diverse webpage appearances.

5.Font properties 
This lesson delves into various CSS font properties, exploring font sizes in pixels, 
points, M, and REM units, illustrating their relative measurements and practical usage. 
It also covers font weights, families, including fallback options, and how to integrate custom 
fonts like those from Google Fonts. Lastly, it touches on text alignment.
Highlights
📏 Exploring font sizes pixels, points, M, and REM units offer different ways to adjust text size, each with its relative scale.
🌐 Font families Understanding how to specify fonts, including fallbacks and integrating custom ones like those from Google Fonts.
💪 Font weight Exploring relative weights, using keywords like "normal" or "bold," and numerical values for finer adjustments.
🔀 Relative sizing Understanding the difference between M and REM units, their relationship with parent and root elements, and their significance in maintaining consistency.
🎯 Practical application Demonstrating how to manipulate and view font changes in code, providing a hands-on learning experience.
🧩 Text alignment Exploring text alignment properties like center, left, right, start, and end, understanding their functionality in different writing systems.
-1px=1/96 inch
-1pt=1/72 inch
-1em=100% of parent
-1rem=100% of root
-fonts.google.com 

6.CSS Inspection 
Learn about inspecting CSS using Chrome Developer Tools, exploring elements, styles, and live 
changes without affecting the original files. Understand how to override existing rules and use 
the inspector to understand CSS layouts.
Highlights
💻 Chrome Developer Tools A powerful suite to inspect and diagnose CSS, crucial for understanding and debugging.
🕵️‍♂️ Inspecting Elements Use shortcuts or right-click to inspect elements, visually select, or locate them in the HTML.
🎨 Live CSS Changes Modify CSS live within Chrome DevTools without altering original files; great for experimentation.
⚠️ Local Changes Changes made only affect local browser view, not the original website or server, ensuring no impact on others.
📊 Computed Tab Helps understand CSS conflicts, showcasing applied styles and allowing easy identification of overridden rules.
🌈 CSS Overview Utilize the CSS overview feature to capture an overview of styles, including colours, fonts, and layout details.
🧠 Practice Use the inspector on provided examples to answer quiz questions, reinforcing learning and understanding CSS inspection techniques.

7.The CSS Box model 
This lesson delves into the crucial CSS properties of margin, padding, and border, defining 
the fundamental CSS concept called the box model. It outlines how these properties impact the layout 
and spacing of HTML elements, creating boundaries and modifying their appearance.
Highlights:
📏 Understanding the Box Model HTML elements are essentially boxes whose dimensions can be adjusted using properties like width and height.
🖼️ Altering Box Dimensions Changing width or height affects vertical and horizontal spacing, respectively, rearranging other elements on the page.
🖌️ Customizing Borders The border property enables thickness, style, and color specification, defining the box's outline independently of its dimensions.
🧩 Padding Adding space within the box using padding, it sits between content and the border without altering the box's size.
📏 Managing Margins Margins control the space between the border of one box and other elements, influencing the layout and spacing between components.
🤔 Understanding Box Model Representation Inspecting the box model in developer tools illustrates margin, border, padding, width, and height, aiding in visualizing and adjusting these values.
🧩 Styling with Div Elements The div element acts as an invisible container, allowing grouping and styling of various content sections, enhancing website structure and design.

8.CSS Cascade 
SummaryUnderstanding the CSS cascade involves determining the priority of conflicting rules 
targeting the same element, impacting the final displayed style. Specificity, position, type, 
and importance play vital roles in this process.
Highlights
🌊 Cascade Concept The cascade refers to the process of determining which CSS rules take precedence 
when multiple conflicting styles target the same element.
🎨 Priority Factors Specificity, position in the code, type of CSS, and importance (marked by the !important keyword) define rule priority.
📊 Priority Order Rules are evaluated based on their specificity (ID, attribute, class, element), position in the code, type (inline, internal, external), and importance, ultimately affecting the final displayed style.
🧩 Quiz Insights Quizzes reinforce understanding of rule priority, considering specificity battles, rule positions, and the impact of different CSS types on the final outcome.
💡Practical Exercise Hands-on exercises help solidify understanding by applying cascade principles to transform styles while maintaining HTML structure.

9.Combining CSS Selectors 
SummaryThis lesson delves into combining CSS selectors to precisely target elements for styling. 
It covers grouping selectors with commas, using the child selector (>), and employing descendant selectors (whitespace between selectors). 
Additionally, it discusses chaining selectors to create highly specific style rules.
Highlights
🎯 Combining Selectors Exploring various CSS selector combinations for precise element targeting.
🌟 Grouping Selectors Using commas to apply styles to multiple selectors simultaneously, saving time and effort.
➡️ Child Selector (>) Selecting direct children elements, distinguishing them from descendants.
🔍 Descendant Selectors Styling elements based on their ancestry relationships within the HTML structure.
🔗 Chaining Selectors Creating highly specific rules by combining multiple selectors without spaces, ensuring precise element selection.

10.CSS Positioning 
Understanding CSS positioning involves grasping four key types static, relative, absolute, and 
fixed. These dictate how elements are positioned on a webpage, affecting their default behaviour 
and relationships to their containers.
Highlights
📌 Static Positioning Default for elements, they flow naturally in the HTML structure.
📌 Relative Positioning Allows shifting an element's position relative to its default location.
📌 Absolute Positioning Positions an element relative to its nearest positioned ancestor or the top left corner of the webpage if none exist.
📌 Fixed Positioning Positions an element relative to the top left corner of the browser window, maintaining its position while scrolling.
This knowledge aids in controlling layout and appearance, influencing elements' display on a webpage.
margin>border>padding

1.CSS display
SummaryExploring CSS layout properties, particularly focusing on the CSS display property and its values.
Highlights
💻 CSS display property dictates layout behaviour.
📏 Elements set to "block" take up full width; "inline" elements fit content size.
🌐 "Inline block" offers size control and horizontal alignment.
🛑 "Display none" hides elements; useful for toggling visibility.
🧩 Example website illustrates display values' impact on layout.
🎨 Challenges demonstrate altering display properties for specific layouts.
🌟 Understanding "block," "inline," and "inline-block" alters element positioning.

2.CSS Float 
Understanding the CSS float property and its significance in text wrapping, mimicking print layouts in web design.
Highlights
🌊 Float property enables text wrapping around specific elements, replicating print layout styles.
📰 Borrowed from newspaper design, web layout adapts techniques like wrapping text around images.
🖼️ Using float left or float right positions elements and enables text wrapping around them.
🌅 The clear property ensures elements don't wrap around floated items, maintaining layout integrity.
🧩 Float historically used extensively for layout but modern approaches like Flexbox and Grid offer more effective alternatives.
🚫 Recommend using float primarily for text wrapping, opting for more advanced tools for complex layouts.

3.Responsive Websites 
Creating responsive websites involves adapting layouts based on screen sizes. 
Various methods like media queries, CSS grid, Flexbox, and Bootstrap aid in achieving responsiveness.
Highlights
💻 Responsive design is crucial for websites to adapt to diverse screen sizes, ensuring a good user experience across devices.
📱 Media queries allow CSS changes at specific breakpoints, adjusting layouts based on screen width.
🌐 CSS grid offers flexibility in creating complex layouts by defining columns, rows, and their sizes.
📏 Flexbox focuses on 1D layouts, providing control over item distribution within a container.
🛠️ Bootstrap, an external framework, uses a 12-column system for layout division and offers pre-built components for easy styling and responsiveness.
🧰 Each method has its strengths; there's no definitive "best" method, but rather tools to suit different needs in web development.
📚 Understanding these methods empowers designers to choose the most suitable approach for specific projects.

4.Media Queries 
Understanding media queries involves defining breakpoints using max-width and min-width to 
alter styling based on specific screen sizes. These queries allow for responsive web design catering to various devices.
Highlights
📱 Media queries use max-width to style for screens smaller or equal to a specified width, while min-width targets larger screens.
💻 Combining breakpoints with and allows styling for specific ranges of screen sizes.
🌐 screen keyword in media queries is default for all screens, while print is used specifically for print layouts.
🎨 Media queries permit alterations in layout, orientation, device height/width, and targeting different media types or features.
🖥️ Practice involves creating media queries for specific screen sizes to change the body background colour.Media queries offer a 
flexible way to tailor website layouts and designs to suit diverse screen sizes and device types.

1.Display:Flex 
CSS Flexbox is explored in this module, highlighting its evolution from table-based layouts to 
various CSS properties like display types and floats. Flexbox is introduced as a powerful tool for creating flexible and complex layouts on websites.
Highlights
💡 Evolution of web layouts Inspired by print media, web layouts transitioned from table-based designs to using properties like display types and floats.
🌐 Display property Early methods involved using the display property to create layouts, which had limitations and led to complex coding for desired designs.
🚫 Issues with floats Floats, while useful for text wrapping and basic layouts, posed challenges in creating complex designs and were considered outdated.
🛠️ Enter Flexbox Flexbox emerged as a powerful tool for creating structured layouts, offering simplicity and flexibility by utilizing the 'display flex' property.
🌟 Flexbox advantages Flexbox allows easy creation of complex layouts, introduces properties like 'Gap,' and disregards default display values, providing control over elements.
🧩 Flexbox basics Using 'display flex' on a container and applying simple modifications, Flexbox simplifies the creation of navigation bars and complex layouts.
📈 Future lessons The module promises a deeper dive into Flexbox axes, flex directions, and more advanced techniques for mastering layouts.

2.Flex direction 
Flexbox, in default settings, aligns items in a row, but understanding and using 'flex direction' allows customization of layouts by altering the main and cross axes.
Highlights
💡 Flexbox's default behaviour lines items from left to right, but this can be changed using 'flex direction' to control the main axis (horizontal or vertical) and the cross axis (perpendicular to the main axis).
🧭 'Flex direction' property determines if items stack in rows or columns, impacting the main and cross axes' orientation.
📏 'Flex basis' affects the size along the main axis (width for rows, height for columns) for each flex item, influencing their layout within the container.
🎨 Applying 'flex direction column' alters the main axis to vertical, changing the layout from left-to-right to top-to-bottom stacking.
🖌️ Utilising CSS selectors like the child combinator and universal selector allows targeting and modifying individual child elements within a Flexbox container.
🌈 Experimentation with 'flex direction' and other Flexbox properties empowers developers to create diverse layouts without changing HTML structure.
📚 Further exploration of Flexbox properties for containers provides insights into building versatile layouts efficiently.

3.Flex layout 
Understanding Flex Layout involves properties like order, flex wrap, justify content, align items, 
align self, and align content. These govern item arrangement and alignment within Flexbox containers.
Highlights
🌈 The "order" property reorganizes child items within a Flexbox by altering their default arrangement based on the rainbow colours.
🔄 "Flex wrap" property manages items when space is limited horizontally, defining whether items wrap or remain on a single line.
📐 "Justify content" dictates how items distribute along the main axis, offering options like start, end, and center.
🧍 "Align items" determines cross-axis alignment within the container, with settings like flex-start, flex-end, and center.
🔄 "Align self" empowers individual items to deviate from container settings for alignment.
🎯 Resource CSS Flexbox cheat sheet from CSS tricks is a valuable guide to these properties for quick reference.
🎮 Complete the Flex Box Froggy game for interactive learning and practical application of Flexbox concepts.

4.Flex sizing 
Understanding the sizing of Flexbox items involves considering default behaviours, including 
automatic shrinking and growing in response to window changes. Flexbox follows a priority-based algorithm to determine item size.
Highlights
📐 Flexbox items automatically shrink when the container size reduces, maintaining default behaviour in most cases.
📏 Sizing properties like width, flex basis, minimum, and maximum width determine item sizing priority.
📊 Flex basis takes precedence over width; it sets the initial width for items, overriding width properties.
📈 Maximum width determines the maximum potential size an item can grow to, restricting growth beyond the specified width.
📉 Minimum width prevents items from shrinking below a set minimum value, maintaining a minimum size constraint.
⚙️ Flex grow and flex shrink properties dictate item behaviour setting both allows items to grow and shrink within specified limits.
🔄 Default behaviour involves items not growing but being allowed to shrink beyond their initial size when container space reduces.

1.CSS Grid 
This module introduces CSS Grid, emphasizing its advantage in creating complex two-dimensional layouts 
easily compared to Flexbox. It clarifies the distinctions between Grid and Flexbox, highlighting their strengths and suggesting their combined use in web development.
Highlights
🌐 CSS Grid simplifies creating intricate two-dimensional layouts, contrasting with the limitations of Flexbox for such complex structures.
🤔 Understanding the distinction Flexbox excels in one-dimensional alignments, while Grid is optimal for 2D layouts, 
resembling a table structure with rows and columns.🛠️ Complementary tools Most developers utilize both Grid and Flexbox alongside other frameworks to enhance design flexibility.
🎯 Grid in action Demonstrations of Grid's behavior showcase its inclination towards structured, aligned layouts compared to Flexbox's adaptive and flexible nature.
🏁 Practical application Steps to implement a Grid layout through CSS, illustrated using examples like creating a chessboard, 
showcasing the straightforward yet powerful nature of Grid's implementation.
🧩 Combination power Understanding how to nest Flexbox within Grid and vice versa, highlighting the flexibility of combining these tools for specific design needs.
🔄 Continuous learning Encouragement to explore and experiment with Grid and Flexbox to better grasp their functionalities through practical exercises and comparisons.

2.Grid Sizing 
Understanding grid sizing in CSS involves various methods, from fixed sizes using pixels or REM to more responsive approaches like auto-sizing and fractional units (FR). 
It also covers defining minimum and maximum sizes, utilizing the repeat function for efficiency, handling excess items within a grid, and debugging using Chrome Developer Tools.
Highlights
💡 Grid Sizing Basics Exploring fixed sizes, responsive strategies, and their limitations.
🔲 Using REM and Fixed Sizes Examining how REM sizing and fixed pixel sizes impact responsiveness.
🔄 Combined Template Rows/Columns Understanding shorthand for defining multiple rows and columns.📏 Auto Keyword Usage Exploring the auto keyword for responsive horizontal space in rows and columns.
📐 Fractional Sizing (FR) Implementing fractional units to create flexible, ratio-based layouts.
⬆️ Min Max Function Utilizing Min Max to set boundaries for responsive column sizes.
🔁 Repeat Function Efficiency Simplifying grid layout creation using the repeat function.

3.Grid placement 
Understanding grid placement involves defining terms like grid container, grid items, tracks, 
cells, and grid lines, collectively allowing the creation of layouts using CSS grid. Flexbox and 
Grid work in tandem for efficient layout designs.
Highlights
📏 Grid layout involves a grid container housing items, each placed within tracks formed by rows and columns.
📐 Terms like grid cells, grid lines, and tracks define the smallest units and separators within a grid layout.
🖼️ Using grid properties, such as grid-template-columns and grid-template-rows, sets up the layout's structure.
🕹️ CSS Flexbox complements grid layouts by enabling easy item centering within containers.
📊 Utilizing properties like grid-column and grid-row enables precise positioning of grid items within the layout.
🧩 The order property in Grid reorders items, useful for fine-tuning item placement within the grid.
🔄 Understanding shorthand properties like grid-column simplifies setting item positions within the grid layout.
This lesson dives into the intricacies of grid placement, exploring terminology, properties, and techniques to create sophisticated layouts efficiently. Flexbox and Grid, when used together, offer powerful tools for versatile and responsive designs.

1.Bootstrap 
Bootstrap, a CSS framework developed in 2010 by Twitter developers, simplifies web design by providing pre-made CSS files and components. 
It offers a 12-column layout system based on Flexbox, aiding in responsive and visually appealing websites for both desktop and mobile. 
While it's widely used, it doesn't eliminate the need for understanding native CSS.
Highlights
🎨 Bootstrap CSS framework created in 2010 by Twitter developers, Otto and Thornton, offering pre-made CSS files for quick web development.
📱 Responsive Design Employs a 12-column layout system based on Flexbox, facilitating responsive websites for mobile-first approaches.
🌐 Usage & Competition Dominates about 80 % of the CSS framework market share, competing with others like Foundation, MUI, and Tailwind.
💡 Pros Offers speed, consistency, and broad browser compatibility, providing pre-built components for easy implementation.
🚫 Downsides Risk of "class bloat" with excessive styling in HTML, limited customization for intricate designs.
⚙️ When to Use Ideal for rapid development of mobile-first, uniform-looking websites, but not for highly customized or simpler projects.
🔗 Implementation Easily integrated via CDN(Content delivery network) links for CSS and additional functionality scripts at the end of the HTML body.Bootstrap serves 
as a valuable tool for swift website development, particularly for projects demanding standardized components and responsiveness. However, its 
limitations in customization and potential for class bloat should be considered when choosing a framework.

-CDN
<link -> used in <head
<src -> used b4 the end of </body 
getbootstrap.com 

2.Bootstrap Layout 
Understanding Bootstrap's 12 column layout system involves using containers, rows, and columns, making it responsive across various screen sizes.
Highlights
📐 Bootstrap's 12 column system involves divs within containers and rows, organizing content via column classes.
🖥️ Containers define different screen sizes, while breakpoints (SM, MD, LG, XL) adapt layout behavior.
📏 Column classes (e.g., col-2, col-4) allocate proportional space within rows, simplifying content sizing.
🌐 Predefined Bootstrap breakpoints minimize the need for manual media queries, enhancing responsiveness.
🎯 Combining classes and breakpoints allows flexible and intuitive content arrangement without custom CSS.
🧩 Bootstrap's layout complexities become clearer with practice, emphasized through exercises for hands-on learning.
🛠️ Customising columns at specific breakpoints involves experimenting with classes to achieve desired layouts.

3.Bootstrap Components 
Bootstrap components offer pre-built, styled elements like buttons and cards, simplifying design 
in projects. The lesson highlights using default colours, accessing styles via class addition, and implementing components such as buttons and navbars effortlessly.
Highlights
💡 Bootstrap Components Simplify design with pre-styled elements like buttons, cards, and navbars, streamlining project development.
🎨 Default Colour Access Utilize default colours easily by adding classes, e.g., BTN for buttons, BTN success for green buttons.
🛠 Implementing Buttons Easily create styled buttons by adding classes, accessing hover animations and styling effortlessly.
🖥 Navbar Integration Bootstrap offers well-designed navbars; implement with example snippets, enabling easy customisation.
🌟 Leveraging Example Code Utilize Bootstrap's examples for features, sections, and layouts, simplifying complex design structures.
📝 Easy Text Replacement Replace text and content seamlessly within components, leveraging Bootstrap's structured design elements.
⚙️ Customisation Modify and personalise components swiftly, adjusting colours, text, and elements with minimal effort.
spacing.png (Refer this for info about spacing)
dark mode -> 
ctrl+f -> To replace all word which we want from another word

WEB DESIGN
1.Color theory
Understanding colour theory is crucial in conveying the right message through design. Colour palettes affect perception and emotion, guiding attention and establishing brand identity.
Highlights
🎨 Colour theory involves choosing palettes for design that convey specific messages to users.
🌈 Different colours evoke varied emotions and associations red for energy, yellow for attention, green for freshness, blue for trust, and purple for royalty.
💡 Combining colours strategically is key; analogous colours harmonise while complementary colours create visual pop.
🖌️ Tools like Adobe Color or Color Hunt aid in selecting and refining colour palettes for designs.
🌟 Consistent and purposeful colour schemes, as seen in LIEBE yogurt's website, enhance brand identity and message conveyance in design.
red->Love , energy,intensity
yellow->joy,intelect,attention
green->Freshness,safety,growth
blue->stability,trust,serenity
purple->royalty,wealth,feminity
Combining colors (In color wheel)
1.Pick beside colors
2.opp ends
3.triangle or square
adobe color
colorhunt.co

2.Typography and font 
Understanding typography involves recognizing the significance of font choices in conveying emotions, moods, and messages. 
It's vital not only to consider the aesthetics but also the readability and legibility of different typefaces.
Highlights
🖋️ Typography isn't just about aesthetics; it profoundly influences how a message is perceived.
📜 Fonts have distinct moods and convey varied messages; Serif fonts appear traditional and authoritative, while Sans-Serif fonts are more approachable and contemporary.
🧐 The Serif family, with its historical roots inspired by marble carvings, exudes seriousness and age, while Sans-Serifs, with their clean lines, appear friendly and modern.
🚗 Font choice impacts legibility significantly; a study showed that a change in typeface on a car dashboard improved the time drivers needed to process information, potentially affecting safety.
👁️ Legibility factors include open shapes, clear distinctions between letters, spacing, and varying proportions within the font.
🎨 Design cohesion involves limiting fonts in a design (preferably two), ensuring their compatibility in mood and era, and creating contrast through variations in weight and typeface combinations.
serif->feet 
fonts.png

3.User interface design 
Understanding User Interface (UI) Design is crucial for creating effective designs that prioritize information hierarchy, layout, alignment, white space, and audience relevance.
Highlights
🎨 Hierarchy Definition Using size, colour contrast, and standout elements to establish content importance aids in guiding user attention effectively.
📐 Layout Impact Incorporating varied elements like text, images, and different hierarchies within a layout enhances design interest and user engagement.
🧩 Alignment Precision Correctly aligning elements within a design ensures consistency and professionalism, reducing clutter and enhancing visual appeal.
⬜ White Space Significance Utilizing white space strategically around elements elevates design, lending a minimalist and often more upscale appearance.
🎯 Audience-Centric Design Tailoring design styles to suit specific audience preferences and needs ensures relevance and better user engagement.
These principles in UI design—hierarchy, layout, alignment, white space, and audience adaptation—lay the foundation for creating visually appealing and user-friendly interfaces across diverse platforms and purposes.

4.User experience design 
Exploring the final pillar of web design, User Experience (UX), through the analogy of a college renovation. UX focuses on invisible, user-centric design, unlike aesthetic-driven design.
Highlights
🏞️ UX vs. Design Contrasting user experience (UX) as an invisible facilitator versus design's aesthetic-driven approach.
🔄 Consistency is Key Emphasising the importance of consistent design and functionality across a website to avoid user confusion.
📖 Reading Patterns Understanding common reading patterns like F-pattern and Z-pattern to strategically place content for easier user navigation.
📱 All Platform Design The necessity of mobile-responsive design to ensure usability across different devices without compromising content or design.
🖼️ Balancing Layouts Finding a middle ground between overwhelming design and too-sparse content, ensuring a pleasant user experience.
⚠️ Beware Dark Patterns Highlighting unethical design practices (dark patterns) that manipulate users into actions not in their best interest.
🌐 Application of Knowledge Encouraging the application of UX principles in designing a hotel website from scratch to test understanding and skill.

Javascript 
1.An overview of the origins of JavaScript, from its roots with Netscape Navigator to its evolution into a dynamic, essential language for web development. 
It delves into its importance, functionalities, comparisons with Java, and its widespread use across browsers and frameworks.
Highlights
🌐 Netscape's Vision JavaScript emerged from Netscape's desire for a more dynamic web, prompting the creation of a simple, user-friendly scripting language to enhance web functionality.
🕰️ History Unveiled Traces the language's evolution from Mosaic to Netscape Navigator's dominance, the browser wars, and how technology transitioned into modern-day browsers like Firefox.
💻 JavaScript's Impact Disabling JavaScript alters the browsing experience, revealing the language's crucial role in rendering sites, handling ads, and enabling functionalities like character count on platforms like Twitter.
📜 Naming and Standardization Explores the name change from Livescript to JavaScript, the relation to Java (or lack thereof), and the standardization through ECMAScript.(European computer manufacturers association)
🚀 JavaScript Today Highlights JavaScript's widespread use beyond frontend development, its presence in frameworks, and its status as the backbone of web development.
📈 Popularity and Importance Showcases JavaScript's enduring popularity as a language crucial for web and app development, often recommended as the primary language to learn for web development endeavors.
🛠️ Future Lessons Teases upcoming lessons focusing on best practices and leveraging JavaScript's strengths in web development.These points encapsulate the emergence, significance, and far-reaching impact of JavaScript in web development, from its inception to its indispensable status in the digital realm.
shift+enter -> to go for next line 

alert("hello");
alert("world");
typeof(2);//number
typeof("hello");//string
typeof(true);//boolean
var myname = " yukki"
var yourname = prompt("What is your name?");
alert("My name is "+ myname + " your name is "+ yourname)

//Exercise

var a=2;
var b=3;
var c=a;
a=b;
b=c;
console.log("a is "+a)
console.log("b is "+b)

//Variables naming rules is same as other lang

var tweet = prompt("Compose your tweet");
var count = tweet.length;
console.log("You hav written "+count+" characters, "+"you hav "+(140-count)+" remaining")

//Slicing
var name="gg";
name.slice(0,1);

var tweet = prompt("Compose your tweet ");
var sliced = tweet.slice(0,140);
alert(sliced);

var tweet = "YuKki";
alert(tweet.toLocaleUpperCase());
alert(tweet.toLocaleLowerCase());

//Project 
var name = prompt("Enter your name: ");
var uc=name.slice(0,1);
var lc=name.slice(1,name.length)
alert("Hello "+uc.toLocaleUpperCase()+lc.toLocaleLowerCase());

//Operators -> +,-,*,/,%
var dogage=prompt("Enter dog's age: ");
var humage= (dogage -2)*4+21;
alert(humage);

//++,--,+=,-=

//Functions -> As usual as in other languages
//math.floor() -> It will roundoff the no to nearest integer value
//math.round() -> Create random number which will be btw 0 and 1, to get btw 100 we will multiply by 100

//Life in weeks
function lifeinweeks(age){
    var curr=90-age;
    var days = curr*365;
    var weeks = curr*7;
    var months = curr*12;
    console.log("You hav "+days+" days, "+weeks+"weeks, "+months+"months");
}
var age=prompt("Enter your age:");
lifeinweeks(age)

//Building a love calculator
prompt("Enter your name");
prompt("Enter their's name");
var num=Math.random()*100;
var ans=Math.floor(num)+1;
console.log("Your love percentage is "+ans+"%");

//Control statements
//Building a love calculator
prompt("Enter your name");
prompt("Enter their's name");
var num=Math.random()*100;
var ans=Math.floor(num)+1;
if(ans>70){
    console.log("Truu lob");
}
else{
    console.log("They're not meant for uh");
}

//comparators -> >,<,>=,<=.
//Equators -> ===,!==
/* ==,!= in this it checks whether they are eql or not without considering datatype
===,!== in this they even check if the datatype matches*/
//Building a love calculator
prompt("Enter your name");
prompt("Enter their's name");
var num=Math.random()*100;
var ans=Math.floor(num)+1;
if (ans>70){
    alert("Truu lob");
}
if (ans < 30){
    alert("You can still try");
}
if (ans < 0){
    alert("They're not meant for uh");
}

//Leap year challenge
function leap(year){
    if(year%4===0){
        if(year%100===0){
            if(year%400===0){
                return "Leap year";
            }else{
                return "Not a leap year";
            }
        }else{
            return "Leap year";
        }
    }else{
        return "Not a leap year";
    }
}
leap(2000);

var array=["leo","geo","meo","feo","aio","dio"];
var inp=prompt("Enter the name:");
//.includes -> checks if the element is present inside an array
array.includes(inp);

//.push -> adds elements at the end of the array
//.pop -> pops the last element from the array
var arr=[];
var count=1;
function fizzbuss(){
    if(count%3==0 && count%5===0 ){
    arr.push("Fizzbuzz");
}
else if(count%3===0){
    arr.push("Fizz");
}
else if(count%5===0){
    arr.push("buzz");
}
else{
    arr.push(count);
}
count++;
    console.log(arr);
}

//Who's buying lunch 
var names=["jio","lio","kio","vio","zio","wio"];
function lun(names){
    var nop=names.length;
    var rp=Math.floor(Math.random()*nop);
    return names[rp]+ " Is buying the lunch today!";
}
lun(names);

//Control statements
//Lyrics of the 99 bottles of the year
var n=99;
for( var i=99;i>0;i--){
    if(i>1){
       console.log((i)+ " bottles of the beer on the wall, "+(i)+" bottles of beer."+"Take one down and pass it around,"+(i-1)+" bottles of beer on the wall")
    }
    else{
        console.log((i)+ " bottle of the beer on the wall, "+(i)+" bottle of beer."+"Take one down and pass it around,"+(i-1)+" bottle of beer on the wall")
}
    }
//Fibonacci 
function fib(){
    var out=[];
    if(n===1){
        out=[0];
    }
    else if(n===2){
        out=[0,1];
    }
    else{
        out=[0,1];
        for(var i=2;i<n;i++){
            out.push(out[out.length - 2]+out[out.length -1]);
        }
    }
    return out;
}
out=fib(1);
console.log(out)


function getmilk(money){
    var noofbottles=Math.floor(money/1.5);
    console.log("buy " + noofbottles + " bottles of milk")
}

getmilk(5);


function getmilk(money){
    console.log("buy " + calbot(money,1.5) + " bottles of milk");
    return money%1.5;
}


function calbot(startingmoney , costperbottles){
    var nofbot=Math.floor(startingmoney/costperbottles);
    return nofbot;
}
getmilk(5);

DOM 
1.Adding JavaScript to websites
Adding JavaScript to websites involves three main methods inline, internal, and external. 
Each has its advantages and placement considerations within HTML. 
Inline and internal methods are included within HTML, while an external script is linked using the src attribute. 
The placement of JavaScript within the document impacts its functionality, and best practice involves placing scripts towards the end, just before the closing body tag.
Highlights
💡 Inline JavaScript in HTML Using attributes like onload allows immediate execution of JavaScript when the specified event occurs.
💻 Internal Script Tag Embedding JavaScript within <script> tags in the HTML document allows for direct execution of code.
📁 External JavaScript File By linking an external JavaScript file using the src attribute, code can be maintained separately from HTML.
🌐 Script Placement The position of scripts within the HTML affects their interaction with HTML elements; placing scripts at the end ensures that the HTML elements are loaded before script execution.
🛠️ Best Practices Avoiding inline JavaScript, preferring external files, and placing scripts towards the end optimizes page loading and functionality.
🧰 Document Object Model (DOM) Upcoming lessons will delve deeper into manipulating HTML elements using the DOM.
⚡ Performance Optimization Proper script placement enhances perceived website loading speed, allowing visible content to load before scripts execute.
-In css we tend to put link inside head element so it gets loaded up first.
-But script link should be added just before the  closing body tag.

2.Introduction to document Object model(DOM)
Introduction to the Document Object Model (DOM), explaining its role in making websites interactive by cataloging elements as objects. 
It converts HTML into a tree structure, enabling manipulation via JavaScript.
Highlights
🌳 DOM Cataloging Converts HTML elements into a tree structure of objects, allowing selection and manipulation.
🖥️ Static Websites to Interactivity Explains the transition from static websites to interactive ones, requiring on-the-fly content changes.
🔍 Browser's Role Describes the browser's task of converting HTML into the DOM tree upon page loading.
🧩 DOM Structure Represents the relationships between HTML elements as a tree diagram within the DOM.
💡 Manipulating the DOM Demonstrates accessing and manipulating elements using JavaScript in the DOM.
🎮 Object Properties and Methods Discusses object properties (like color, content) and methods (like click, appendChild) in the DOM.
🛠️ Challenges Encourages practical learning by inviting modification of webpage content via the console without altering the HTML file.
HTML TREE GENERATOR -> https://chromewebstore.google.com/detail/html-tree-generator/dlbbmhhaadfnbbdnjalilhdakfmiffeg

3.Selecting HTML elements with javascript
getelementsbytagname->return all elements with that tagname(even if its more than 1)
getelementbyclassname->select oly class
getelementsbyid->select oly id
queryselector->We can select anything , like class or id or element.We can also combine like how we select for css
queryselectorall->To select multiple elements.

4.Manipulating and changing styles of HTML elements using JavaScript
Js naming conventions is in camel casing
So for styling we can visit w3 schools documentation.
We have to assign as strings

5.The Separation of Concerns: Structure vs Style vs behaviour
classList->It will show the classes present in that element.
classList.add("feknf");->This will add new class to that element
classList.remove()
classList.toggle()->If its there remove , its not there then add.

6.Text Manipulation and the Text Content Property
textcontent->Gives oly content
innerhtml->It gives you the innerhtml tags with content

7.Manipulating HTML elements attributes
.attributes->gives list of all attributes
getattribute()->gives particu;ar attribute
setattribute(,)->first parameter is what you wanna change second one is to what 

https://www.appbrewery.co/p/web-development-course-resources

8.Advanced DOM Manipulation 
-addEventListener->Sets up a function to be called whenever the specified event is delivered to the target.
debugger;->Through this we can see all that steps that goes through.
Higher order functions:Functions that can take other functions as input.

9.A Deeper Understanding of Javascript Objects
Constructor function: Variable naming (BamBoo)->Not camel casing so thats how we get to know that its constructor function
then if we want to create one we will use new BamBoo keyword.

10.Using Keyboard Event Listeners to Check for Key down
keydown
Callback function:
Ex document.addEventListener("Click",function(event){
    console.log(event)
});

Jquery
1.What is jQuery?
A dive into jQuery, the widely used JavaScript library, highlights its simplification of complex tasks and reduction of code length for common functionalities in web development.
Highlights
💡 jQuery, the renowned JavaScript library, simplifies code by condensing lengthy JavaScript tasks into concise functions.
📊 Thousands of JavaScript libraries exist, yet jQuery stands out for its widespread usage and simplification of complex operations.
🌐 Simplifies DOM manipulation significantly; replaces lengthy JavaScript queries with concise jQuery selectors like $("h1").
🛠️ Created by John Resig out of frustration with JavaScript's complexity, jQuery streamlines coding, making it more readable, debuggable, and faster to write.
🖥️ Similar to Bootstrap, jQuery serves as a code repository facilitating easier and quicker UI improvements on websites.
📈 Offers shorthand notation using $ for jQuery selectors, enhancing code readability and efficiency.
🤔 Addresses the verbosity of traditional JavaScript by providing a shorter, more intuitive syntax for common tasks like DOM traversal and manipulation.

2.How to incorporate Jquery
How to incorporate jQuery into websites involves downloading the jQuery code files or using a Content Delivery Network (CDN) for faster loading. 
Incorporation requires adding script and stylesheet references in HTML and placing the jQuery script tag strategically.
Highlights
💻 Incorporate jQuery via download or CDN for website enhancement.
🌐 CDN usage boosts load speed through cached libraries.
📦 Use the latest jQuery version and script tag for incorporation.
🖥️ Place CSS in the head section and JavaScript just before the closing body tag.
🧩 Utilize the dollar sign or "jQuery" to access elements for manipulation.
⚙️ Ensure correct placement of jQuery script tag to avoid parsing issues.
🛠️ Use the ready method or place scripts at the end of the webpage for optimal functionality.
jquery.com -> We can read this documentation.
minify -> To reduce the memory it takes

3.hasclass -> Checks is it has that particular class
.text -> Changes the text
.html -> similar to innerhtml -> Which is used to change content and also add html 
jquery is all about using methods , where those methods are written in js 
.attr( ) -> It will give the attribute name
.attr( , ) -> It will set the attribute  
.on -> Will select any events
.before -> We will be able to add something before something
.after -> We will be able to add something after something
prepend -> Right after opening tag and just b4 content
append -> Right after the content and b4 the closing tag
.show 
.hide 
.toggle 
.fadeout
.fadein
.fadeouttoggle
.fadeintoggle
.slideup 
.slidedown 
.slidetoggle 
.animate ({something:numeric value })

1.BASH 
Understanding the command line, specifically the Bash Shell, opens up greater control and speed in handling tasks on Unix-based systems.
It provides direct access to the kernel and hardware, offering flexibility and efficiency.
Highlights
💻 The command line serves as a direct interface to the kernel, allowing users greater control over system operations.
🐚 The Bash Shell, a command line interpreter for Unix systems, provides powerful functionalities for efficient computing.
⚙️ Command line operations offer quicker and more direct execution compared to graphical interfaces, enhancing both speed and control.
📁 Accessing hidden or configuration files becomes possible through command line operations, providing flexibility beyond what graphical interfaces typically offer.
🌐 Understanding command line operations becomes crucial for tasks like Git and version control, widely used in software development.
🚀 Embracing the command line unlocks efficiency and simplicity, offering a range of common commands and advanced techniques for users.
🎯 Mastery of the command line enhances developer capabilities and efficiency in Unix-based environments like Linux or macOS, crucial for backend and web development.
-kernel -> Refers to core of os
Graphical User Interface Shells
Command Line Interface Shells 
BASH -> Bourne Again Shell (For unix based systems)
ctrl-A : It goes to starting position 
ctrl-E : It goes to ending position 
ctrl-U : Clears 
touch textfile : To create file in directory 
open textfile : Open the file 
code textfile : Open the file to edit 
rm textfile : To delete the file 
pwd(print working directory ) : Gives you entire path of current folder location 
rm * : To remove all the files 
rm -r : To remove directory 
Link to refer to learn commands 
https://www.learnenough.com/command-line-tutorial/basics

Learning command line basics involves terminal navigation, directory changes using cd, and utilizing commands like ls for listing contents.
The lesson also introduces shortcuts for efficient command line usage.
Highlights
💻 Changing directories (cd) helps navigate through the terminal efficiently.
📁 Using ls allows listing contents within a directory.
🛠️ Autocomplete with tab speeds up command input.
⬆️⬇️ Utilizing arrow keys for command history.
🖱️ Shortcuts like Option-clicking or keyboard shortcuts (Ctrl + A/E/U) enhance command line maneuverability.
📝 Planning to cover creating directories and handling files in the next lesson.

A tutorial on creating, opening, and removing files and directories using command line tools, emphasizing caution due to their powerful nature.
Highlights
💻 Introducing directory and file creation via command line using mkdir and touch.
📁 Navigating directories (cd) and checking contents (ls) through the command line.
🗑️ Deleting files (rm) individually or using wildcards to remove multiple files at once.
⚠️ Cautionary note on the potential destructive power of commands and the importance of verifying directory locations.
📂 Removing directories (rm -r) with care due to its capacity to delete all contents recursively.
🧨 Highlighting a cautionary tale of a destructive command combination and the importance of responsible usage.
🌐 Recommendation for further learning through a Command Line tutorial website.

1.Backend Development 
Understanding backend web development involves comprehending the server, application logic, and databases. 
It's the unseen functionality powering a website or application.
Highlights
💻 Backend development deals with the "behind the scenes" code running a web app.
🌐 Full stack developers handle both front end (user-facing) and back end (invisible functionality).
🖥️ Backend comprises servers (computer handling requests), applications (logic for responding to requests), and databases (for storing and retrieving user data).
🍳 Analogy Comparing a restaurant's front end (where customers order) to the back end (where the kitchen processes orders) helps understand the flow between front-end requests and back-end responses.
🔄 The interaction between front end and back end resembles a cycle of request and response, much like ordering and receiving food at a restaurant.
🛠️ Next lesson Detailed insights into tools and technologies essential for building the back end of web applications.

2.Tools
Exploring backend technologies reveals various language options, but the choice doesn't significantly impact functionality. 
Node.js emerges as the standout choice due to its alignment with frontend JavaScript and its widespread professional use.
Highlights
💻 Frontend languages are fixed (HTML, CSS, JavaScript), while backend languages offer more flexibility.
🌐 Backend languages like Java, Ruby, PHP, C#, Python, and JavaScript are viable options.
🔄 Backend frameworks such as Rails, Java Spring, C# ASP.NET, Laravel, Flask, Django, and Node.js are available, with Node.js being the focus.
🎯 Node.js stands out due to its JavaScript alignment and its dominance in professional developer usage.
📈 Node.js offers abundant resources, documentation, and job prospects compared to other backend frameworks.
📉 Some frameworks like Ruby on Rails and PHP (Laravel) are declining in popularity.
🧭 Node.js is the chosen backend technology for its ease of use with existing JavaScript knowledge and its high professional demand.

3.What is Node.js 
Node.js is an asynchronous, event-driven JavaScript runtime that liberates JavaScript from being confined to browsers, allowing its use in various applications. 
Its key benefits lie in enabling full-stack JavaScript usage, ease of scaling, speed, efficiency, and a vast ecosystem.
Highlights
🚀 Node.js Introduction Node.js is a JavaScript runtime that frees JavaScript from being browser-bound, allowing its use for server-side applications.
🌐 Full-Stack JavaScript Its major advantage lies in enabling developers to use JavaScript across the entire stack, easing transitions and allowing code sharing between client and server.
⚡ Asynchronous & Event-Driven Node.js operates asynchronously, freeing resources by triggering code only upon specific events, leading to faster, non-blocking operations.
🛠️ Scalability & Efficiency It offers easy scalability, making it suitable for large-scale professional projects due to its speed and efficiency.
🌍 Vibrant Ecosystem Node.js boasts a vibrant community, a rich collection of open-source modules in its package manager, and extensive documentation, making it a go-to choice for many big players like 
LinkedIn, Twitter, Netflix, and even NASA.These highlights showcase Node.js's role in unifying JavaScript usage, enhancing development efficiency, and empowering developers to build scalable, efficient applications.

4.Using Node.js 
Using Node.js involves version checking, using the Node REPL, and running JavaScript files through Node's runtime environment. 
This guide navigates through version checks, navigating Visual Studio Code's terminal, using the Node REPL, and executing JavaScript files.
Highlights
📝 Version checking Verify Node version with node -v in the terminal to ensure compatibility.
💻 Node REPL Utilize the (Read Eval Print Loop) to test and execute JavaScript code in a command line environment.
📁 Running JavaScript files Execute JavaScript files with Node's runtime environment using the command node filename.js.
🧭 Navigating directories Use cd in the terminal to move between directories and run files conveniently.
🛠 Troubleshooting Understand how to resolve version discrepancies and navigate through the file system accurately.
🚀 Next steps The tutorial leads towards exploring native Node modules for more robust applications.

5.How to Use the Native Node Modules
This lesson introduces the use of native Node modules, expanding the capabilities beyond JavaScript by enabling access to local file systems and server functionalities.
Highlights
🛠️ Node's native modules act as a fundamental toolset, providing essential functionalities like file access and networking for server-side applications.
📚 The native modules resemble pre-bundled games in an operating system, ready for use to entertain or enhance functionalities.
📂 The lesson focuses on the File System (FS) module, showcasing how it allows reading and writing to local storage or the server.
⌨️ Using the CommonJS pattern, the tutorial demonstrates importing required methods from the FS module to manipulate files.
📝 The practical exercise involves writing to a file using FS.writeFile and reading from it using FS.readFile, showcasing the practical use of these native Node capabilities.
📦 An introduction to the Node package manager is teased for the next lesson, hinting at further exploration into Node's ecosystem and capabilities.
💡 By understanding native modules like FS, users can expand their NodeJS proficiency beyond browser limitations, accessing local file systems securely.
https://nodejs.org/docs/latest-v18.x/api/index.html

6.The NPM Package Manager and Installing External Node Modules
Learned about NPM (Node Package Manager), a repository for Node modules, similar to a community tool library, gathering various tools for Node applications. 
Initiated a project using NPM, configured the Package.json file, and installed an NPM package called "silly name" to explore its functionality. 
Explored importing packages with the "require" and "import" keywords, emphasizing the shift to Ecmascript modules in Node 12 onwards. 
Finally, tasked with installing the "superheroes" package, using it to generate random superhero names within the project.
Highlights
📦 Explored NPM as a repository for Node modules, akin to a community tool library for code.
🛠️ Initialized a project with NPM, configured Package.json, and installed the "silly name" NPM package.
🔄 Discussed the transition from "require" to "import" for package importation, highlighting Ecmascript modules in Node 12+.
🦸 Tasked with installing and utilizing the "superheroes" package to generate random superhero names within the project.
https://www.npmjs.com/

Express js 
Express is a JavaScript framework built on Node, simplifying backend creation for websites. 
It stands out due to its ease of use and popularity among professional developers, offering advantages over using just Node.
Highlights
⚙️ Express simplifies backend creation on top of Node.js.
🌐 Node is a runtime environment enabling JavaScript beyond browsers.
🛠️ Node's versatility extends to IoT devices and desktop app development.
🔧 Express acts like an "electric screwdriver" for efficient JavaScript backend coding.
🧩 Its advantages include better readability, less code writing, and easy integration of features via middleware.
📈 Highly preferred among JavaScript backend developers, Express is a clear choice for website backend creation with Node.
💡 Its popularity is backed by data in the State of JavaScript statistics.
Expressjs.com -> For documentation 

2.HTTP 
An overview of HTTP requests and their functionalities was covered, explaining the key methods - GET, POST, PUT, PATCH, and DELETE - illustrating their roles in retrieving, sending, updating, and deleting resources. 
The process of setting up a Node server with Express was outlined, demonstrating how to handle GET requests and send responses.
Highlights
🌐 HTTP Stands for Hypertext Transfer Protocol, serving as the language for computers to communicate across the Internet.
📡 Request MethodsGET Retrieves resources from the server.POST Sends data to the server, often used for form submissions.PUT & PATCH Update methods; PUT replaces, PATCH modifies parts of a resource.DELETE Removes resources from the server.
🛠️ Setting Up a Server Steps detailed to initialize an Express server, listen on a port, and handle GET requests for a basic home page.
🔄 Nodemon Introduced as a tool automating server restarts upon file changes, eliminating the need for manual restarts during development.
Nodemon-> To restart server 

3.Postman
Learned about HTTP requests and responses, HTTP status codes, and their meanings. 
Explored different request methods like GET, POST, PUT, PATCH, and DELETE. 
Introduced the tool Postman for testing requests.
Highlights
🌐 HTTP requests facilitate client-server communication.
📈 HTTP status codes categorize responses for success, redirection, client errors, and server errors.
🛠 Postman is a valuable tool for testing different request types and endpoints.
💻 Explored GET, POST, PUT, PATCH, and DELETE methods and their respective functionalities.
🚀 Postman simplifies backend testing without needing a complete frontend setup.
📥 Used Postman to send requests to specific endpoints for testing purposes.
https://developer.mozilla.org/en-US/docs/Web/HTTP/Status -> Different kinds of status.

Tricks to remember :
1.Hold on
2.here you go
3.Go Away 
4.You fucked up 
5.I fucked up 

4.Middleware 
Express Middlewares serve as intermediaries in Node and Express applications, sitting between raw requests and route handlers. 
They preprocess requests, log request details, handle authentication, and process errors before reaching their final destinations.
Highlights
💼 Express Middlewares act as intermediaries, processing requests before reaching the final routing stage.
🔄 They preprocess requests for multiple handlers, allowing changes or functions before reaching the intended route.
📝 Middleware logs request details like request duration, type (get, post, put), and request status.
🔐 Authentication middleware verifies if a request comes from an authorized client before proceeding.
❌ Error handling middleware identifies and manages errors before they reach the route handlers.
📦 Body parser middleware in Express helps parse request bodies, particularly useful for handling form data.
🖥️ Integrating HTML forms into backend systems involves routes, middleware like body parser, and handling incoming data through route handlers.
Express Middlewares, including body parser, play pivotal roles in managing requests, authentication, error handling, and data parsing, ensuring smoother communication between clients and servers in Node and Express applications.

5.Custom Middleware
This lesson delves into custom middleware creation and uses Morgan, a logging middleware. 
It covers creating custom middleware functions and integrating them into the Express framework, emphasizing their role in handling incoming requests before reaching the route handlers. 
It culminates in building a band name generator by combining learned middleware concepts.
Highlights
🧩 Middleware categories include pre-processing types like body parser and logging types like Morgan.
📝 Morgan, a widely-used logging middleware, tracks incoming requests' details, easily integrated using App.use.
🛠 Creating custom middleware involves using App.use and defining functions that handle requests, responses, and the next method.
🚀 Understanding the order of middleware execution is crucial for proper request handling.
🧰 Building a band name generator involves integrating learned middleware concepts like body parser and custom middleware functions.
📦 Code structure Utilize App.get to serve HTML, integrate body parser for form data, and craft a custom middleware to generate band names.
🔍 Debugging process Break complex tasks into smaller parts, test frequently, and troubleshoot by referring to solution code if needed.

EJS 
1.Learn about EJS, Embedded JavaScript, and its role in web development. 
EJS allows JavaScript to be inserted into HTML, facilitating dynamic rendering without cluttering server-side code.
Highlights
🌐 EJS Introduction Understand EJS as a templating language embedding JavaScript within HTML files.
💡 Separation of Concerns EJS enables separation of HTML/CSS from JavaScript, crucial for managing complexity in large projects.
⚙️ EJS Functionality Utilize EJS with Express by using res.render() to pass data to an HTML file.
🖥️ Practical Exercise Develop a simple website using Express, EJS, and JavaScript's getDay() method to differentiate weekdays and weekends dynamically.
🛠️ Server Setup Set up an Express server, install EJS, and initialize a basic project structure with folders and files.
🧠 Learning Tips Guidance on using documentation, initializing projects, creating files/folders, and resolving queries while learning.This text explores EJS's role in separating concerns, facilitating dynamic content, and its practical application in creating a simple Express-based website.

2.EJS Tags 
This tutorial on EJS tags delves into various tag types and their functionalities within the templating tool. 
It covers outputting JavaScript into HTML, executing JavaScript code within a file, rendering HTML, escaping tags, adding comments, and using includes to insert files.
Highlights
💻 EJS Tag Syntax Always initiated with angle brackets and percentage signs. Different tag types include equals sign for JavaScript output in HTML, minus sign for executing JavaScript code, escaping tags, adding comments with a pound sign, and includes for inserting external files.
📝 JavaScript Output Tags like <%= ... %> allow JavaScript output into HTML, displaying values like variables or strings directly on a webpage.
🧩 Includes for Modularity Utilizing the include tag <%- include(filename) %> enables incorporating external files, facilitating modularity in code by reusing sections like headers or footers.Commenting Using the pound sign `<%# ... %>` allows adding comments in the code that are ignored during execution or rendering.
🔄 Executing JavaScript Tags without output, like <% ... %>, execute JavaScript code within the file, performing operations without displaying anything on the webpage.
🛡️ Escaping Tags Adding an extra percentage sign  <% % % %> % allows displaying tags as plain text without interpreting them as JavaScript.
🌐 HTML Rendering Tags like <%- ... %> render HTML content, displaying it as formatted elements on the webpage.
<%# This is a comment %> 

3.Passing data into EJS Templates 
locals -> will check if its present in js file

4.EJS Partials and Layouts
This lesson covers EJS partials and layouts, explaining how to manage static files, set up express.static for file paths, and use partials to streamline code.
Highlights
🎨 Managing static files Understanding the distinction between static and dynamic files in node-based backends, organizing them in a 'public' folder.
🌐 Setting up express.static Using middleware to specify the location of static files in Express for rendering stylesheets and images.
🧩 Utilizing EJS partials Employing <%- include %> in EJS files to incorporate reusable code like headers and footers across multiple pages.
🖥️ Multi-page website setup Establishing routes for various pages (e.g., about, contact) and integrating partials to ensure consistent styling and layout.

1.Version Control Using Git and Github 
Introduction to Git and its functionalities for version control, including saving points, comparisons, and rollbacks.
Highlights
🔄 Git enables version control, allowing saving points and rollbacks to previous versions.
🔍 Compare current code against previous versions or roll back to any desired point.
💻 Git facilitates various functionalities like cloning repositories, forking, pull requests, and merging.
📁 Introducing Git for local version control using the command line.

2.Via Command Line 
Learned how to use Git via command line for version control. Covered creating directories, files, staging changes, committing with messages, and using Git commands like git diff and git checkout for tracking and reverting changes.
Highlights
🖥️ Initiated Git in the story directory via git init.
📁 Created directories and files using commands like mkdir and touch.
📝 Added files to staging area using git add.
📦 Commited changes with meaningful messages via git commit -m "message".
🔍 Used git status to track file status in working directory and staging area.↔️ Demonstrated the use of git diff to visualize differences in files.
↩️ Employed git checkout to revert changes back to a previous commit state.

cd --> Change directory 
mkdir --> Make directory 
ls --> List files 
touch filename --> To create a file 
code filename --> Write in the file
git init --> The git init command creates a new Git repository. It can be used to convert an existing, unversioned project to a Git repository or initialize a new, empty repository. 
git status --> The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git.
git add filename --> To add to the staging area 
git commit -m "ajnjnd" -> To commit 
git log --> To see the status of commit 
git diff filename --> It will tell the difference comparing previous one and current one.
git checkout filename --> It will return to the old file 















































































































































































































































